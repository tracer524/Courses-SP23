1.
import numpy as np

while(1==1):
    A = np.random.rand(4, 4)
    if(np.linalg.matrix_rank(A)==4):break

print("矩阵：\n",A)
print("转置矩阵：\n", np.transpose(A))
print("逆矩阵：\n", np.linalg.inv(A))
print("矩阵秩为：", np.linalg.matrix_rank(A))
print("矩阵行列式为：", np.linalg.det(A))
eigenvalues, eigenvectors = np.linalg.eig(A)
print("矩阵的特征值：\n", eigenvalues)
print("矩阵的特征向量：\n", eigenvectors)
b = np.random.rand(4, 1)
x = np.linalg.solve(A, b)
print("线性方程组的解为：\n", x)


矩阵：
 [[0.89239347 0.60381173 0.80752361 0.91368768]
 [0.89828299 0.3343028  0.83523175 0.77309176]
 [0.74559152 0.43626636 0.89828856 0.56960649]
 [0.4178917  0.21023233 0.27751026 0.66508099]]
转置矩阵：
 [[0.89239347 0.89828299 0.74559152 0.4178917 ]
 [0.60381173 0.3343028  0.43626636 0.21023233]
 [0.80752361 0.83523175 0.89828856 0.27751026]
 [0.91368768 0.77309176 0.56960649 0.66508099]]
逆矩阵：
 [[ 4.51265809  6.20197388 -7.72479045 -6.7928031 ]
 [ 4.62741012 -2.82310101 -0.7951701  -2.3945316 ]
 [-4.4429992  -2.54478249  6.35551511  3.61868914]
 [-2.44429733 -1.94268523  2.45319834  5.01869794]]
矩阵秩为： 4
矩阵行列式为： -0.01060270466176927
矩阵的特征值：
 [ 2.53116166 -0.1764352   0.06392182  0.37141754]
矩阵的特征向量：
 [[-0.60580033 -0.50879068 -0.72445434  0.06023898]
 [-0.54016607  0.8595279  -0.24893569 -0.14609962]
 [-0.51627179 -0.01943704  0.54654573 -0.70819135]
 [-0.27329474  0.04433999  0.33835587  0.68810695]]
线性方程组的解为：
 [[-1.38754973]
 [-0.60512464]
 [ 1.17388437]
 [ 0.74751223]]














2.import numpy as np
import scipy

B = np.random.rand(6, 6)
b = np.random.rand(6, 1)

x, residuals, rank, singular_values = np.linalg.lstsq(B, b, rcond=None)
print("最小二乘解：\n", x)

U, s, Vt = np.linalg.svd(B)
print("B的奇异值分解：")
print("U：\n", U)
print("s：\n", s)
print("Vt：\n", Vt)
P, L, U = scipy.linalg.lu(B)
print("B的LU分解：")
print("P：\n", P)
print("L：\n", L)
print("U：\n", U)







最小二乘解：
 [[ 1.50298744]
 [12.24051208]
 [-1.41326043]
 [-1.09497815]
 [-1.32639429]
 [-7.68901144]]
B的奇异值分解：
U：
 [[-0.43386367 -0.20028937  0.73143348  0.45088984  0.13902863  0.11841003]
 [-0.36804867 -0.65160247 -0.55578037  0.16508022  0.02793414  0.32098409]
 [-0.39590939  0.46640907 -0.34191025  0.27596684  0.5892217  -0.29236244]
 [-0.49450745  0.1066469   0.14095313 -0.78426753  0.17229104  0.28188877]
 [-0.35310553 -0.2747008   0.01797734 -0.17590738 -0.3300013  -0.8122121 ]
 [-0.3877333   0.48054851 -0.13791176  0.21741714 -0.70293915  0.24150093]]
s：
 [3.17328250e+00 1.20299173e+00 6.53192439e-01 5.42504058e-01
 2.70366747e-01 1.20673947e-03]
Vt：
 [[-0.38978972 -0.3681182  -0.54696682 -0.3392755  -0.36646884 -0.40493578]
 [ 0.10667404  0.18280543 -0.37125786  0.45508286 -0.64739266  0.4372102 ]
 [ 0.65260108 -0.06833174 -0.02090304 -0.68213377 -0.22128334  0.23395056]
 [ 0.20089822 -0.22680313  0.59068443  0.2103071  -0.54061417 -0.4720163 ]
 [-0.58471038  0.35708392  0.42205472 -0.40259074 -0.3208029   0.29577163]
 [-0.16896784 -0.80464486  0.18846663  0.07859305  0.04938459  0.52901903]]
B的LU分解：
P：
 [[1. 0. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 0.]
 [0. 1. 0. 0. 0. 0.]
 [0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 1.]
 [0. 0. 0. 0. 1. 0.]]
L：
 [[ 1.          0.          0.          0.          0.          0.        ]
 [ 0.40099847  1.          0.          0.          0.          0.        ]
 [ 0.17440233  0.50419706  1.          0.          0.          0.        ]
 [ 0.67381707  0.99622999 -0.47494832  1.          0.          0.        ]
 [ 0.72627234  0.42002905 -0.53307966 -0.93674549  1.          0.        ]
 [ 0.52046792  0.31235694  0.07020366  0.07341551  0.29492474  1.        ]]
U：
 [[ 0.84987896  0.387951    0.99289358  0.06787501  0.41051825  0.45966738]
 [ 0.          0.44795547  0.24098652  0.77403176 -0.15009402  0.49373622]
 [ 0.          0.          0.6989147  -0.09912116  0.96907551 -0.32365578]
 [ 0.          0.          0.         -0.44415568  1.0198985  -0.02747905]
 [ 0.          0.          0.          0.          1.33067113 -0.12133194]
 [ 0.          0.          0.          0.          0.         -0.00280647]]












3.import scipy.sparse as sps
import numpy as np
import scipy.sparse.linalg as spla 

row = np.array([0, 0, 1, 2, 2, 3, 3, 4, 4])
col = np.array([0, 2, 3, 1, 4, 2, 4, 3, 4])
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
csr1 = sps.csr_matrix((data, (row, col)), shape=(5, 5))
print(csr1.toarray())
'''
[[1 0 2 0 0]
 [0 0 0 3 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
'''

indptr = np.array([0, 2, 3, 5, 7, 9])
indices = np.array([0, 2, 0, 1, 4, 2, 4, 3, 4])
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
csr2 = sps.csr_matrix((data, indices, indptr), shape=(5, 5))
print(csr2.toarray())
'''
[[1 0 2 0 0]
 [0 0 0 3 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
''' 

b = np.array([4, 2, 1, 3, 5])
print(spla.spsolve(csr2, b))











[[1 0 2 0 0]
 [0 0 0 3 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
[[1 0 2 0 0]
 [3 0 0 0 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
[ 0.66666667  1.5         1.66666667  1.75       -1.        ]