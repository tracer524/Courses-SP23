1:﻿def is_sorted(s):    if len(s)<=1:        return 1    for i in range(0,len(s)-2):        if s[i]>s[i+1]:            return -1    return 1def qsort(s):    if len(s)<=1:        return s    s_less=[];s_greater=[];s_equal=[]    for k in s:        if k<s[0]:            s_less.append(k)        elif k>s[0]:            s_greater.append(k)        else:            s_equal.append(k)    return qsort(s_less)+s_equal+qsort(s_greater)def binary_search(s,low,high,k):    if low>high:        return -1    if low==high-1 and k!=s[low] and k!=s[high]:        return -1    mid=int((low+high)/2)    if k==s[mid]:        return mid    if k>s[mid]:        return binary_search(s,mid+1,high,k)    if k<s[mid]:        return binary_search(s,low,mid-1,k)s=[5,6,21,32,51,60,67,73,77,99]if not is_sorted(s):    s=qsort(s)print(binary_search(s,0,len(s)-1,5))print(binary_search(s,0,len(s)-1,31))print(binary_search(s,0,len(s)-1,99))print(binary_search(s,0,len(s)-1,64))print(binary_search(s,0,len(s)-1,51))输出结果：﻿0-19-142:﻿count={}def F(n):    if n not in count:        count[n]=1    else:        count[n]=count[n]+1    if n<=1:        return 1    return F(n-1)+F(n-2)F(10)print(count)输出结果:﻿{10: 1, 9: 1, 8: 2, 7: 3, 6: 5, 5: 8, 4: 13, 3: 21, 2: 34, 1: 55, 0: 34}3:﻿import sys, mathdef test_all_functions():    test____reduce()    test____add()    test____sub()    test____mul()    test____div()    def gcd(a,b):    while a!=b:        if a>b:            a-=b        else:            b-=a    return adef reduce(n,d):    while gcd(n,d)!=1:        a=gcd(n,d)        n/=a        d/=a    r=[n,d]    return rdef test____reduce():    d={[15,5]:[3,1],[18,12]:[3,2]}    for a in d.keys():        if reduce(a[0],a[1])!=d(a):            print("test failed")def add(x,y):    a=x[0]*y[1]+x[1]*y[0]    b=x[1]*y[1]    return reduce(a,b)def test____add():    d={[[1,3],[1,4]]:[7,12],[[3,5],[1,3]]:[14,15]}    for a in d.keys():        if add(a[0],a[1])!=d(a):            print("test failed")            def sub(x,y):    a=x[0]*y[1]-x[1]*y[0]    b=x[1]*y[1]    return reduce(a,b)def test____sub():    d={[[1,3],[1,4]]:[1,12],[[3,5],[1,3]]:[4,15]}    for a in d.keys():        if sub(a[0],a[1])!=d(a):            print("test failed")def mul(x,y):    a=x[0]*y[0]    b=x[1]*y[1]    return reduce(a,b)def test____mul():    d={[[1,3],[1,4]]:[1,12],[[3,5],[1,3]]:[3,15]}    for a in d.keys():        if mul(a[0],a[1])!=d(a):            print("test failed")def div(x,y):    a=x[0]*y[1]    b=x[1]*y[0]    return reduce(a,b)def test____div():    d={[[1,3],[1,4]]:[4,3],[[3,5],[1,3]]:[9,5]}    for a in d.keys():        if div(a[0],a[1])!=d(a):            print("test failed")def output(x):    print("%d/%d",(x[0],x[1]))    def get_rational(s):    a=0    b=0    neg1=0    neg2=0    mul1=1    mul2=1    n=s.find('/')    la=n-1    lb=len(s)-n-2    if s[2]=='-':        neg1=1        mul1=-1    if s[n+1]=='-':        neg2=1        mul2=-1    dict={'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'0':0}    for i in range(1+neg1,n):        a+=dict[s[i]]*(10**(la-i))    for i in range(n+1+neg2,len(s)-1):        b+=dict[s[i]]*(10**(lb-i-n))    r=[a*mul1,b*mul2]    return r    if __name__ == '__main__' :    if len(sys.argv)==1:        print(__doc__)    elif len(sys.argv)==2 and sys.rgv[1]=='-h':        print(__doc__)    elif len(sys.argv)==2 and sys.argv[1]=='test':        test_all_functions()    else:        import argparse        parser=argparse.ArgumentParser()        parser.add_argument('--op',type=str)        parser.add_argument('--x',type=str)        parser.add_argument('--y',type=str)        args=parser.parse_args()        op=args.op        x=get_rational(args.x); y=get_rational(args.y)        f={'add':add, 'sub':sub, 'mul':mul, 'div':div}        output(f[op](s,y))