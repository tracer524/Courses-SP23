1.﻿from sympy import symbols, Matrix, simplifya, b = symbols('a b')matrix = Matrix([[3, -2, a, a],                 [0, 2, b, b],                 [-5, 2, -9, -7],                 [a, -2, a, 3]])inverse_matrix = matrix.inv()simplified_inverse = simplify(inverse_matrix)print("逆矩阵:")print(simplified_inverse)eigenvalues = matrix.eigenvals()print("特征值:")print(eigenvalues)eigenvectors = matrix.eigenvects()print("特征向量:")for eigenvector in eigenvectors:    print("特征值:", eigenvector[0])    print("代数重数:", eigenvector[1])    print("特征向量:")    for vector in eigenvector[2]:        print(vector)Out:﻿逆矩阵:Matrix([[-(a*b + 7*a - 5*b - 27)/(3*a**2 - 36*a + 81), 1/3, -(a + b)/(3*a - 27), -(2*a + 2*b)/(3*a**2 - 36*a + 81)], [-b*(a - 5)/(2*a**2 - 24*a + 54), 1/2, -b/(2*a - 18), -b/(a**2 - 12*a + 27)], [(a*b + 7*a - 5*b - 15)/(3*(a**2 - 12*a + 27)), -1/3, (a + b + 3)/(3*(a - 9)), (5*a + 2*b - 21)/(3*(a**2 - 12*a + 27))], [-(a*b + 4*a - 5*b)/(3*a**2 - 36*a + 81), 1/3, -(a + b)/(3*a - 27), -(5*a + 2*b - 27)/(3*a**2 - 36*a + 81)]])特征值:{3: 1, 2: 1, a - 9: 1, -a + 3: 1}特征向量:特征值: 2代数重数: 1特征向量:Matrix([[(-b*(2*a - 22) + b*(2*a - 14))/(8*b)], [(-b*(5*a - 11) + b*(5*a - 7))/(8*b)], [-1], [1]])特征值: 3代数重数: 1特征向量:Matrix([[-((-a + 2*b)*(-2*b + 7) - (-a + 2*b)*(-2*b + 12))/(-5*a + 10*b)], [0], [-1], [1]])特征值: -a + 3代数重数: 1特征向量:Matrix([[-(-(-2*b + (a - 12)*(a - 1))*(2*a*(a - 1) - b*(-2*a + 10)) + (-b*(-2*a + 10) + (a - 1)*(-a*(a - 12) - 5*a))*(-7*a - 2*b + 7))/((-5*a + 5)*(-b*(-2*a + 10) + (a - 1)*(-a*(a - 12) - 5*a)))], [-(-b*(2*a*(a - 1) - b*(-2*a + 10)) + b*(-b*(-2*a + 10) + (a - 1)*(-a*(a - 12) - 5*a)))/((a - 1)*(-b*(-2*a + 10) + (a - 1)*(-a*(a - 12) - 5*a)))], [-(2*a*(a - 1) - b*(-2*a + 10))/(-b*(-2*a + 10) + (a - 1)*(-a*(a - 12) - 5*a))], [1]])特征值: a - 9代数重数: 1特征向量:Matrix([[-(-(-a*(-a + 11) - 2*b)*(-b*(2*a - 14) + (-12*a + 84)*(-a + 11)) + (-b*(2*a - 14) + (-a + 11)*(a*(-a + 12) - 5*a))*(7*a - 2*b - 77))/((5*a - 55)*(-b*(2*a - 14) + (-a + 11)*(a*(-a + 12) - 5*a)))], [-(-b*(-b*(2*a - 14) + (-12*a + 84)*(-a + 11)) + b*(-b*(2*a - 14) + (-a + 11)*(a*(-a + 12) - 5*a)))/((-a + 11)*(-b*(2*a - 14) + (-a + 11)*(a*(-a + 12) - 5*a)))], [-(-b*(2*a - 14) + (-12*a + 84)*(-a + 11))/(-b*(2*a - 14) + (-a + 11)*(a*(-a + 12) - 5*a))], [1]])2.﻿from sympy import symbols, Eq, solvea, b, c = symbols('a b c')x, y, z, w = symbols('x y z w')equations = (Eq(3 * x - 2 * y + a * z + a * w, 1),             Eq(2 * y + b * z + b * w, -2),             Eq(-5 * x + 2 * y - 9 * z - 7 * w, 3),             Eq(a * x - 2 * y + a * z + 3 * w, c))solution = solve(equations, (x, y, z, w))print("解:")print(solution)Out:﻿解:{x: (-5*a**2 - 4*a*b + 26*a + 14*b - 2*c*(a + b) - 27)/(3*(a**2 - 12*a + 27)), y: (-a**2 - 2*a*b + 12*a - b*c + 7*b - 27)/(a**2 - 12*a + 27), z: (5*a**2 + 4*a*b - 17*a - 14*b + c*(5*a + 2*b - 21) + 12)/(3*(a**2 - 12*a + 27)), w: (-5*a**2 - 4*a*b + 29*a + 14*b - c*(5*a + 2*b - 27) - 54)/(3*(a**2 - 12*a + 27))}3.﻿from sympy import symbols, Function, Eq, dsolve, Derivativex = symbols('x')f = Function('f')(x)diffeq = Eq(Derivative(f, x, x) - 2 * Derivative(f, x) + 3 * f - 4, 0)solution = dsolve(diffeq, f)C1, C2 = symbols('C1 C2')f_solution = solution.rhsf_prime_solution = solution.rhs.diff(x)initial_conditions = [Eq(f_solution.subs(x, 0), 16), Eq(f_prime_solution.subs(x, 0), 18)]constants = solve(initial_conditions, (C1, C2))solutions_with_constants = solution.subs(constants)print("解:")print(solutions_with_constants)Out:﻿解:Eq(f(x), (5*sqrt(2)*sin(sqrt(2)*x)/3 + 44*cos(sqrt(2)*x)/3)*exp(x) + 4/3)